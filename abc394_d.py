###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
[deepseek AC]
def main():
    T = input().strip()
    
    # 対応する括弧のペアを定義
    pairs = {'(': ')', '[': ']', '<': '>'}
    
    stack = []
    
    for char in T:
        if char in pairs:  # 開き括弧
            stack.append(char)
        else:  # 閉じ括弧
            if not stack:
                print("No")
                return
            
            # スタックの先頭と現在の閉じ括弧が対応しているかチェック
            top = stack.pop()
            if pairs.get(top) != char:
                print("No")
                return
    
    # スタックが空ならすべての括弧が正しく対応
    print("Yes" if not stack else "No")

if __name__ == "__main__":
    main()
###############################################
[my deepseek AC]
T=str(input())
mapp={'(':')','<':'>','[':']'}
stack=[]
for t in T:
  if t in mapp.keys():
    stack.append(t)
  
  else:
    if not stack:
      print('No')
      exit()
      
    w=stack.pop()
    if t!=mapp.get(w):
      print('No')
      exit()
      
if not stack:
  print('Yes')
else:
  print('No')
###############################################

[my TLE]
T=str(input())
for i in range(len(T)//2+1):
  T2=T.replace('[]','').replace('<>','').replace('()','')
  if T=='':
    print('Yes')
    exit()
  T=T2
print('No')
  
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
