###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
[cgpt]

**どうやって「小さい方から N 番目の回文数」を求めているか** 

---

## 1. 桁数ごとに回文数の個数を数える

回文数は「前半を決めれば残りが決まる」性質を使います。

* **1桁**
  → 0,1,2,…,9 の 10 個
* **2桁**
  → 11,22,…,99 の 9 個
* **3桁**
  → 101,111,121,…,999 の 90 個
* **4桁**
  → 1001,1111,…,9999 の 90 個
* **5桁**
  → 10001,10011,…,99999 の 900 個

一般式：

* 桁数 $d$ の回文数の個数は

  $$
  \text{count}(d) = 
  \begin{cases}
  10 & (d=1) \\
  9 \times 10^{\lceil d/2 \rceil - 1} & (d \geq 2)
  \end{cases}
  $$

---

## 2. N が属する桁数を決める

小さい桁から順に「回文の個数」を累積していき、
「N が含まれる桁数 $d$」を探します。

例：

* $N=15$

  * 1桁には 10 個ある → まだ足りない
  * 残り 5 → 2桁の回文の中にある
    → **2桁目の5番目** が答え

---

## 3. 桁数 d 内でのインデックスを求める

$N - \text{(これまでの累積)}$ で「d 桁内での順位」を計算。

---

## 4. 前半の数字を決める

* 回文は「前半部分」を決めれば自動的に完成する。
* 桁数 $d$、前半長 $m = \lceil d/2 \rceil$。
* $d=1$ の場合 → half = index-1（0から始まる）。
* $d \geq 2$ の場合 → half = $10^{m-1} + (index-1)$。

例: $d=2$、index=5

* half = 1 + 4 = 5
* → 回文 = "55"

---

## 5. 回文を構築

* 偶数桁: **前半 + 前半を逆順にくっつける**
* 奇数桁: **前半 + (前半の最後の桁を除いた部分を逆順にくっつける)**

例:

* half=12, d=4 → "12" + "21" = 1221
* half=123, d=5 → "123" + "21" = 12321

---

## まとめ

* **桁数ごとに回文数を分類して数える**
* **N が属する桁数を決める**
* **前半を計算し、回文を構築する**

これにより $N \leq 10^{18}$ の大きな N でも、桁数の計算だけで即座に答えが出せます 🚀

---

###############################################
[cgpt]
def nth_palindrome(N: int) -> int:
    d = 1
    total = 0
    while True:
        if d == 1:
            count = 10
        else:
            m = (d + 1) // 2
            count = 9 * (10 ** (m - 1))
        if total + count >= N:
            break
        total += count
        d += 1
    index = N - total
    m = (d + 1) // 2
    if d == 1:
        half = index - 1
    else:
        start = 10 ** (m - 1)
        half = start + (index - 1)

    s = str(half)
    if d % 2 == 0:
        return int(s + s[::-1])
    else:
        return int(s + s[:-1][::-1])


if __name__ == "__main__":
    N = int(input().strip())
    print(nth_palindrome(N))
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
