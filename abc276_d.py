###############################################
問題文
正整数列A=(a1​,a2​,…,aN​)が与えられます。
あなたは以下の操作のうち1つを選んで行うことを0回以上何度でも繰り返せます。
1≤i≤Nかつai​が2の倍数であるような整数iを選び、ai​をai//2​​に置き換える
1≤i≤Nかつai​が3の倍数であるような整数iを選び、ai​をai​​//3に置き換える
あなたの目標はAがa1​=a2​=…=aN​を満たす状態にすることです。
目標を達成するために必要な操作の回数の最小値を求めてください。
ただし、どのように操作を行っても目標を達成できない場合、代わりに-1と出力してください。
制約
2≤N≤1000
1≤ai​≤10**9
入力はすべて整数
###############################################
入力
N
a1 a2 ... aN
###############################################
[titia AC]
import sys
input = sys.stdin.readline

from math import gcd

N=int(input())
A=list(map(int,input().split()))

GCD=0
for a in A:
    GCD=gcd(a,GCD)

ANS=0

for a in A:
    x=a//GCD

    while x>1:
        if x%2==0:
            ANS+=1
            x//=2
        elif x%3==0:
            x//=3
            ANS+=1
        else:
            print(-1)
            exit()
print(ANS)
###############################################
最重要なポイント：
あなたの目標はAがa1​=a2​=…=aN​を満たす状態にすることです。
必ずしも、素数にまで破り続ける必要はない
問題の意味を取り違えた時点でWA決定
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
[my WA25]
N=int(input())
A=list(map(int,input().split()))

def count_powers(n: int):
    count2, count3 = 0, 0
    while n % 2 == 0:
        n //= 2
        count2 += 1
    while n % 3 == 0:
        n //= 3
        count3 += 1
    return count2, count3, n  # n は残りの部分（2,3 以外）

B=[]
C2=[]
C3=[]
for a in A:
  c2,c3,n=count_powers(a)
  C2+=[c2]
  C3+=[c3]
  B+=[n]

t=max(C2)+max(C3)
if len(set(B))==1:
  print(t)
else:
  print(-1)
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
