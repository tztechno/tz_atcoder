###############################################
32bit 整数に収まらない場合でも大丈夫
N種類、Y年間、M種大量発生
大量発生する年が何回あるか
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
###############################################
[ai]

import math

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def lcm(a, b, y_limit):
    if a == 0 or b == 0:
        return 0

    res_a = a // gcd(a, b)
    if b > y_limit // res_a:
        return y_limit + 1
    
    return res_a * b

def combinations(n, k):
    return math.comb(n, k)

def solve():
    N, M, Y = map(int, input().split())
    A = list(map(int, input().split()))

    if M == 0:

        print(0)
        return

    ans = 0
    
    for i in range(1, 1 << N):
        k = bin(i).count('1')

        if k < M:
            continue

        current_lcm = 1
        is_overflow = False

        for j in range(N):
            if (i >> j) & 1:
                current_lcm = lcm(current_lcm, A[j], Y)
                if current_lcm > Y:
                    is_overflow = True
                    break
        
        if is_overflow:
            continue

        S_k_contribution = Y // current_lcm
        
        term_sign = 1 if (k - M) % 2 == 0 else -1
        comb_val = combinations(k, M)
        
        ans += term_sign * comb_val * S_k_contribution

    print(ans)

if __name__ == "__main__":
    solve()

###############################################
